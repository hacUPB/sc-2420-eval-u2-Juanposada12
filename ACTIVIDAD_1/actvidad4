#include <iostream>
#include <cstdio>
#include <chrono>
#include <thread>
#include <SDL.h>

// Estructura para almacenar la posición de las figuras
struct Shape {
    int x, y;
    int width, height; // Para el rectángulo
    int radius;        // Para el círculo
};

// Inicializar las figuras
Shape rectangle = {50, 50, 200, 100}; // Rectángulo
Shape lineStart = {300, 50}; // Inicio de la línea
Shape lineEnd = {500, 150};   // Fin de la línea
Shape circle = {400, 300, 0, 50}; // Círculo (solo necesitamos el radio)

void DrawCircle(SDL_Renderer* renderer, int centerX, int centerY, int radius) {
    for (int w = 0; w < radius * 2; w++) {
        for (int h = 0; h < radius * 2; h++) {
            int dx = radius - w; // distancia horizontal
            int dy = radius - h; // distancia vertical
            if ((dx * dx + dy * dy) <= (radius * radius)) {
                SDL_RenderDrawPoint(renderer, centerX + dx, centerY + dy);
            }
        }
    }
}

void Setup(SDL_Renderer*& renderer) {
    printf("Setup called\n");
}

void Update() {
    // Desplazar las figuras hacia la derecha
    rectangle.x += 1; // Mover el rectángulo
    lineStart.x += 1; // Mover el inicio de la línea
    lineEnd.x += 1;   // Mover el fin de la línea
    circle.x += 1;    // Mover el centro del círculo

    // Restringir el movimiento para que no desaparezcan
    if (rectangle.x > 800) rectangle.x = -rectangle.width; // Reiniciar posición
    if (lineStart.x > 800) lineStart.x = -10; // Reiniciar posición
    if (lineEnd.x > 800) lineEnd.x = -10; // Reiniciar posición
    if (circle.x > 800) circle.x = -circle.radius; // Reiniciar posición
}

void Render(SDL_Renderer* renderer) {
    // Limpiar la pantalla
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255); // Color negro
    SDL_RenderClear(renderer);

    // Dibuja un rectángulo
    SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255); // Color rojo
    SDL_Rect rect = { rectangle.x, rectangle.y, rectangle.width, rectangle.height };
    SDL_RenderFillRect(renderer, &rect); // Rellenar el rectángulo

    // Dibuja una línea
    SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255); // Color verde
    SDL_RenderDrawLine(renderer, lineStart.x, lineStart.y, lineEnd.x, lineEnd.y);

    // Dibuja un círculo
    SDL_SetRenderDrawColor(renderer, 0, 0, 255, 255); // Color azul
    DrawCircle(renderer, circle.x, 300, circle.radius); // Círculo en (x, 300)

    // Presentar la pantalla
    SDL_RenderPresent(renderer);
}

int main(int argc, char* argv[]) {
    // Inicializar SDL
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        printf("No se pudo inicializar SDL: %s\n", SDL_GetError());
        return 1;
    }

    // Crear ventana
    SDL_Window* window = SDL_CreateWindow("Movimiento de Figuras", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 800, 600, 0);
    if (!window) {
        printf("No se pudo crear la ventana: %s\n", SDL_GetError());
        SDL_Quit();
        return 1;
    }

    // Crear renderer
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if (!renderer) {
        printf("No se pudo crear el renderer: %s\n", SDL_GetError());
        SDL_DestroyWindow(window);
        SDL_Quit();
        return 1;
    }

    Setup(renderer);

    while (true) {
        Update();
        Render(renderer);

        // Comprobar si se ha presionado una tecla para salir
        SDL_Event event;
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
                goto exit; // Salir del bucle si se cierra la ventana
            }
        }

        std::this_thread::sleep_for(std::chrono::milliseconds(16));
    }

exit:
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit(); // Cerrar SDL
    return 0;
}
